#!/bin/bash

# android-tools-fsutils should be installed as
# "sudo apt-get install android-tools-fsutils"

# partition size in MB
BOOTLOAD_RESERVE=$((8*2048))
BOOT_ROM_SIZE=$((16*2048))
SYSTEM_ROM_SIZE=$((800*2048))
CACHE_SIZE=$((512*2048))
RECOVERY_ROM_SIZE=$((16*2048))
DEVICE_SIZE=$((8*2048))
MISC_SIZE=$((6*2048))
DATAFOOTER_SIZE=$((2*2048))

# parse command line
moreoptions=1
#node="na"
cal_only=0
flash_images=1
not_partition=0
not_format_fs=0
bootloader_file="u-boot.imx"
bootimage_file="boot.img"
systemimage_file="system.img"
systemimage_raw_file="system_raw.img"
recoveryimage_file="recovery.img"

if [ -z ${node} ]; then
bn=$(basename $0)
cat << eom
    Please specify a node this way:
    sudo node=/dev/loopX $bn
eom
exit
else
if [ ! -b ${node} ]; then
cat << eom
    The node: ${node} is noa a block device.
    Exiting ... 
eom
exit
fi
fi


# call sfdisk to create partition table
# get total card size
seprate=40
total_size=`sfdisk -s ${node}`
total_size=`expr ${total_size} / 1024`
boot_rom_sizeb=`expr ${BOOT_ROM_SIZE} + ${BOOTLOAD_RESERVE}`
extend_size=`expr ${SYSTEM_ROM_SIZE} + ${CACHE_SIZE} + ${DEVICE_SIZE} + ${DATAFOOTER_SIZE} + ${seprate}`
data_size=`expr ${total_size} - ${boot_rom_sizeb} - ${RECOVERY_ROM_SIZE} - ${extend_size} - ${MISC_SIZE} - ${seprate}`

# create partitions
if [ "${cal_only}" -eq "1" ]; then
cat << EOF
BOOT   : ${boot_rom_sizeb}MB
RECOVERY: ${RECOVERY_ROM_SIZE}MB
MISC   : ${MISC_SIZE}MB
--------------------------------
| EXTEND : ${extend_size}MB	|
--------------------------------
SYSTEM : ${SYSTEM_ROM_SIZE}MB
CACHE  : ${CACHE_SIZE}MB
DEVICE : ${DEVICE_SIZE}MB
DATA   : ${data_size}MB
DATAFOOTER : ${DATAFOOTER_SIZE}MB
EOF
exit
fi

function format_android
{
    echo "formating android images"
    mkfs.ext4 ${node}${part}5 -F -L system
    mkfs.ext4 ${node}${part}6 -F -L cache
    mkfs.ext4 ${node}${part}7 -F -L device
    mkfs.ext4 ${node}${part}8 -F -L data
}

function flash_android
{
    bootloader_file="u-boot.imx"
    bootimage_file="boot.img"
    recoveryimage_file="recovery.img"
if [ "${flash_images}" -eq "1" ]; then
    echo "flashing android images..."    
    echo "bootloader: ${bootloader_file}"
    echo "boot image: ${bootimage_file}"
    echo "recovery image: ${recoveryimage_file}"
    echo "system image: ${systemimage_file}"
set -x
    dd if=/dev/zero of=${onode} bs=1k seek=384 count=129
    dd if=${bootloader_file} of=${onode} bs=1k seek=1
    dd if=${bootimage_file} of=${node}${part}1
    dd if=${recoveryimage_file} of=${node}${part}2
    simg2img ${systemimage_file} ${systemimage_raw_file}
    dd if=${systemimage_raw_file} of=${node}${part}5
    rm ${systemimage_raw_file}
    sync
set +x
fi
}

if [[ "${not_partition}" -eq "1" && "${flash_images}" -eq "1" ]] ; then
    flash_android
    exit
fi

# must be empty in order to get the entire disk space
extend_size=""

sfdisk --force ${node} << EOF
,${boot_rom_sizeb},83
,${RECOVERY_ROM_SIZE},83
,${MISC_SIZE},83
,${extend_size},5
,${SYSTEM_ROM_SIZE},83
,${CACHE_SIZE},83
,${DEVICE_SIZE},83
,${data_size},83
,${DATAFOOTER_SIZE},83
EOF

# adjust the partition reserve for bootloader.
# if you don't put the uboot on same device, you can remove the BOOTLOADER_ERSERVE
# to have 8M space.
# the minimal sylinder for some card is 4M, maybe some was 8M
# just 8M for some big eMMC 's sylinder
sfdisk --force ${node} -N1 << EOF
${BOOTLOAD_RESERVE},${BOOT_ROM_SIZE},83
EOF

kpartx -av ${node}
onode=${node}
node=/dev/mapper/$(basename ${node})

part="p"
#
# let the partitions get created
#
sleep 3
lsblk ${onode}
format_android
flash_android

node=/dev/$(basename ${node})
kpartx -d ${node}
